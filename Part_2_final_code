#include <dht_nonblocking.h>
#define DHT_SENSOR_TYPE DHT_TYPE_11
#include "IRremote.h"
#include <LiquidCrystal.h>

static const int DHT_SENSOR_PIN = 2;
DHT_nonblocking dht_sensor( DHT_SENSOR_PIN, DHT_SENSOR_TYPE );

const int RELAY = 4;
char switchstate;
int receiver = 13; 
IRrecv irrecv(receiver);     
decode_results results;     
LiquidCrystal lcd(7, 8, 9, 10, 11, 12);

float temperature;
float humidity;
int onOffValue = 10;
int minValue = 50;
int maxValue = 0;

void setup() {
Serial.begin(9600);
pinMode(RELAY, OUTPUT);
irrecv.enableIRIn();
lcd.begin(16, 2);
}

static bool measure_environment( float *temperature, float *humidity )
{
  static unsigned long measurement_timestamp = millis( );

  if( millis( ) - measurement_timestamp > 3000ul )
  {
    if( dht_sensor.measure( temperature, humidity ) == true )
    {
      measurement_timestamp = millis( );
      return( true );
    }
  }
  return( false );
}

void loop() {

  if( measure_environment( &temperature, &humidity ) == true )
  {
    Serial.print( "T = " );
    Serial.print( temperature, 1 );
    Serial.print( " deg. C, H = " );
    Serial.print( humidity, 1 );
    Serial.print( "%" );
    Serial.print( "..." );
    Serial.print( " min value = " );
    Serial.print( minValue );
    Serial.print( " max value = " );
    Serial.print( maxValue );
    Serial.print("\n");

  lcd.setCursor(0, 0);
  lcd.print("                           ");

  lcd.setCursor(0, 0);
  lcd.print("T= ");
  lcd.setCursor(3, 0);
  lcd.print(temperature, 0);
  lcd.setCursor(5, 0);
  lcd.print("C, H= ");
  lcd.setCursor(11, 0);
  lcd.print(humidity, 0);
  
  lcd.setCursor(0, 1);
  lcd.print("On<");
  lcd.setCursor(3, 1);
  lcd.print(onOffValue);
  lcd.setCursor(6, 1);
  lcd.print(" m");
  lcd.setCursor(8, 1);
  lcd.print(minValue);
  lcd.setCursor(10, 1);
  lcd.print("  M");
  lcd.setCursor(13, 1);
  lcd.print(maxValue);
  
   if(temperature < onOffValue)
    {
      digitalWrite(4, LOW);
    } else {
      digitalWrite(4, HIGH);
    }

    if(temperature > maxValue)
    {
      maxValue = temperature;
    }

    if(temperature < minValue)
    {
      minValue = temperature;
    }
  }

  if (irrecv.decode(&results))

  {
    translateIR(); 
    irrecv.resume();
  } 
  
while(Serial.available()>0){  
switchstate = Serial.read();

Serial.print(switchstate);
Serial.print("\n");
delay(15);

if(switchstate == '1'){
 digitalWrite(4, LOW);
 Serial.print("on");
}
else if(switchstate == '0'){
 digitalWrite(4, HIGH);
 Serial.print("off");
}
}
}

void translateIR() 
{

  switch(results.value)

  {
    case 0xFF629D: onOffValue = onOffValue + 1;     break;
    case 0xFFA857: onOffValue = onOffValue - 1;     break;
  }
  delay(500);
}

